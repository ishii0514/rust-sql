---
description: 
globs: 
alwaysApply: false
---
# Rust開発ベストプラクティス

## 1. コーディングルール

- **フォーマット:** `rustfmt` を使用してコードを自動フォーマットしてください。コミット前に必ず実行してください。
- **静的解析:** `cargo clippy` を定期的に実行し、警告を修正してください。Clippyは多くの一般的な間違いや非効率なコードを検出します。
- **命名規則:**
    - 変数名、関数名: `snake_case`
    - 型名 (struct, enum, trait): `PascalCase`
    - 定数: `UPPER_SNAKE_CASE`
- **エラーハンドリング:**
    - 回復可能なエラーには `Result<T, E>` を使用してください。
    - プログラマのバグや回復不能なエラーには `panic!` を使用してください。
- **ドキュメンテーション:** `///` を用いて、publicな関数、struct, enum, traitには必ずドキュメントコメントを記述してください。

## 2. SOLID原則に基づいた設計指針

- **単一責任の原則 (SRP):** 各structやモジュールは、ただ一つの責任を持つべきです。機能は小さく、凝集度高く保ってください。
- **開放/閉鎖の原則 (OCP):** 既存のコードを修正することなく、振る舞いを拡張できるように設計してください。Rustでは、`trait` を活用することでこれを実現します。
- **リスコフの置換原則 (LSP):** `trait` を実装する型は、その `trait` が期待する振る舞いを完全に満たす必要があります。
- **インターフェース分離の原則 (ISP):** 大きな `trait` よりも、特定の機能に特化した小さな `trait` を複数定義することを推奨します。
- **依存性逆転の原則 (DIP):** 具体的な実装ではなく、`trait` のような抽象に依存してください。依存関係は外部から注入 (Dependency Injection) することを検討してください。

## 3. テストの義務化

- **単体テスト:** publicな関数やメソッドには、必ず単体テストを記述してください。テストは `#[cfg(test)]` をつけたモジュール内に記述します。
- **結合テスト:** クレート間の連携や、外部ライブラリとの連携を検証するため、`tests` ディレクトリに結合テストを記述してください。
- **網羅性:** テストカバレッジを意識し、主要なロジックや境界値がテストされていることを確認してください。
- **CI/CD:** プルリクエスト時には、必ず全てのテストがパスすることを必須とします。

## 4. フォルダ構成

標準的なCargoのディレクトリ構造に従ってください。

- `src/main.rs`: バイナリクレートのルート。
- `src/lib.rs`: ライブラリクレートのルート。
- `src/bin/`: 複数のバイナリを持つ場合、ここに配置します。
- `tests/`: 結合テストを配置します。
- `benches/`: ベンチマークを配置します。
- `examples/`: 使用例を配置します。
- `src/` 以下は、アプリケーションのドメインや機能に応じて、適切にモジュール（例: `src/api/`, `src/models/`）に分割してください。
